using System;
using CommonHelper.CommonEntity;
using CommonHelper.Helper;
using CommonHelper.Helper.EFDbContext;
using CommonHelper.Helper.EFRepository;
using CommonHelper.AopInterceptor;
using Newtonsoft.Json;
using System.Collections.Generic;
using System.Data.Entity;
using System.Linq;
using System.Web;
using WebApplication1.Entity;
using WebApplication1.Params;
using CommonHelper.staticVar;
using CommonHelper.EFRepository;
namespace WebApplication1.Repository
{
	//启用分布式事务
    //[Intercept(typeof(DistributeRepository))]
    public partial class $entity.EntityName$Repository : BaseRepository<$entity.EntityName$,$entity.EntityName$Params,$entity.EntityName$OrderBy,$entity.EntityName$SetNullParams>
    {
		/// <summary>
        /// 通用的设置查询参数方法，只有在参数不为null的情况下才会设置，
		/// 满足项目中常用的模糊查询，分页查询等功能
        /// </summary>
        /// <param name="query">待设置参数的query对象</param>
        /// <param name="eqArgs">装载查询参数的实体类</param>
		/// <param name="neqArgs">装载不等于查询参数的实体类</param>
        /// <returns>返回设置好查询参数的query对象</returns>
        protected override IQueryable<$entity.EntityName$> Query(IQueryable<$entity.EntityName$> query, $entity.EntityName$Params eqArgs, $entity.EntityName$Params neqArgs = null)
        {
            if (eqArgs != null)
            {
			$entity.PropList:{$if(it.ParamsTypeIsEqual)$

				if (eqArgs.$it.PropName$ != null)
				{
					query = query.Where(a => a.$it.SrcPropName$ == eqArgs.$it.PropName$);
				}
			$elseif(it.ParamsTypeIsRangeStart)$$if(!it.IsKey)$

				if (eqArgs.$it.PropName$ != null)
                {
                    query = query.Where(a => a.$it.SrcPropName$ >= eqArgs.$it.PropName$);
                }
			$endif$$elseif(it.ParamsTypeIsRangeEnd)$$if(!it.IsKey)$

				if (eqArgs.$it.PropName$ != null)
                {
                    query = query.Where(a => a.$it.SrcPropName$ <= eqArgs.$it.PropName$);
                }
			$endif$$elseif(it.ParamsTypeIsLike)$$if(!it.IsKey)$

				if (!string.IsNullOrEmpty(eqArgs.$it.PropName$))
                {
                    query = query.Where(a => a.$it.SrcPropName$.Contains(eqArgs.$it.PropName$));
                }
			$endif$$endif$}$
            }
			if(neqArgs != null){
			$entity.PropList:{$if(it.ParamsTypeIsEqual)$

				if (neqArgs.$it.PropName$ != null)
				{
					query = query.Where(a => a.$it.SrcPropName$ != neqArgs.$it.PropName$);
				}
			$elseif(it.ParamsTypeIsLike)$$if(!it.IsKey)$

				if (!string.IsNullOrEmpty(neqArgs.$it.PropName$))
                {
					query = query.Where(a => !a.$it.SrcPropName$.Contains(neqArgs.$it.PropName$));
				}
			$endif$$endif$}$
				query = OrderByAsc(query, eqArgs.orderByAsc);
                query = OrderByDesc(query, eqArgs.orderByDesc);
			}
            return query;
        }

		/// <summary>
        /// 升序排序的查询参数设置，当对应字段的升序设置为true时才会对
		/// 该字段升序。
        /// </summary>
        /// <param name="query">待设置升序参数的query对象</param>
        /// <param name="orderBy">装载升序参数的实体类</param>
        /// <returns>返回设置好升序参数的query对象</returns>
        IQueryable<$entity.EntityName$> OrderByAsc(IQueryable<$entity.EntityName$> query, $entity.EntityName$OrderBy orderBy)
        {
            if (orderBy != null)
            {
			$entity.PropList:{$if(it.ParamsTypeIsEqual)$

				if (orderBy.$it.PropName$) { query = query.OrderBy(a => a.$it.PropName$); }
			$endif$}$
            }
            return query;
        }

		/// <summary>
        /// 降序排序的查询参数设置，当对应字段的升序设置为true时才会对
		/// 该字段降序。
        /// </summary>
        /// <param name="query">待设置降序参数的query对象</param>
        /// <param name="orderBy">装载降序参数的实体类</param>
        /// <returns>返回设置好降序参数的query对象</returns>
        IQueryable<$entity.EntityName$> OrderByDesc(IQueryable<$entity.EntityName$> query, $entity.EntityName$OrderBy orderBy)
        {
            if (orderBy != null)
            {
			$entity.PropList:{$if(it.ParamsTypeIsEqual)$

				if (orderBy.$it.PropName$) { query = query.OrderByDescending(a => a.$it.PropName$); }
			$endif$};separator="else "$
				else
				{
					query = query.OrderByDescending(a => a.$entity.KeyName$);
				}
            }
            else
            {
                query = query.OrderByDescending(a => a.$entity.KeyName$);
            }
            return query;
        }

		/// <summary>
        /// 修改变化值的部分共用代码，这里抽取出来简化结构
        /// </summary>
        /// <param name="updateBefore"></param>
        /// <param name="entity"></param>
        protected override void UpdateChange(BaseDbContext dbContext, $entity.EntityName$ entity)
		{
			$entity.EntityName$  updateBefore = new $entity.EntityName$  { $entity.KeyName$ = entity.$entity.KeyName$};
			dbContext.Set<$entity.EntityName$>().Attach(updateBefore);
			$entity.PropList:{$if(it.ParamsTypeIsEqual)$$if(!it.IsKey)$
			if (entity.$it.PropName$ != null)
			{
				updateBefore.$it.PropName$ = entity.$it.PropName$;
			}
			$endif$$endif$}$
		}

		/// <summary>
        /// 把指定字段值设置为null的部分共用代码，这里抽取出来简化结构
        /// </summary>
        /// <param name="dbContext"></param>
        /// <param name="param"></param>
        protected override void SetNull(BaseDbContext dbContext, $entity.EntityName$SetNullParams param)
		{
			$entity.EntityName$ updateBefore = FindEntity(param.$entity.KeyName$);
			dbContext.Set<$entity.EntityName$>().Attach(updateBefore);
			$entity.PropList:{$if(it.ParamsTypeIsEqual)$$if(!it.IsKey)$
			if (param.$it.PropName$)
			{
				updateBefore.$it.PropName$ = null;
			}
			$endif$$endif$}$
		}

		/// <summary>
        /// 检查分布式事务是否已完成
        /// </summary>
        /// <param name="primaryKeyVal">主键的值</param>
		public void CheckTransactionFinish(long primaryKeyVal)
		{
			CheckTransactionFinish(primaryKeyVal, "$entity.TableName$");
		}

		public override BaseDbContext CreateDbContext()
        {
            return new MyDbContext2();
        }

		public override InverseRepository<$entity.EntityName$> CurrentInverse()
        {
			using(BaseDbContext db = CreateDbContext())
			{
				return AllStatic.InverseRepositoryMap[db.Database.Connection.ConnectionString]["IRobot_QrCodePayTask"];
			}
        }

		public override List<BaseDbContext> CreateAllDbContext()
        {
			List<BaseDbContext> baseDbContextList = new List<BaseDbContext>();
			baseDbContextList.Add(new MyDbContext2());
            return baseDbContextList;
        }

        protected override Func<$entity.EntityName$, IComparable> GetOrderColAndOrderType($entity.EntityName$Params paramz, out bool orderType)
        {
            throw new NotImplementedException();
        }

        protected override IQueryable<$entity.EntityName$> GetBetweenAnd(IQueryable<$entity.EntityName$> query, $entity.EntityName$Params paramz, IComparable baseExtremum, IComparable otherExtremum)
        {
            throw new NotImplementedException();
        }
    }
}