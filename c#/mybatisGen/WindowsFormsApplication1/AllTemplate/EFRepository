using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Linq;
using System.Web;
using WebApplication1.Entity;
using WebApplication1.MyExtensions;
using WebApplication1.Params;
namespace WebApplication1.Repository
{
    public partial class $entity.EntityName$Repository : BaseRepository<$entity.EntityName$>
    {
		/// <summary>
        /// 通用的设置查询参数方法，只有在参数不为null的情况下才会设置，
		/// 满足项目中常用的模糊查询，分页查询等功能
        /// </summary>
        /// <param name="query">待设置参数的query对象</param>
        /// <param name="eqArgs">装载查询参数的实体类</param>
		/// <param name="neqArgs">装载不等于查询参数的实体类</param>
        /// <returns>返回设置好查询参数的query对象</returns>
        IQueryable<$entity.EntityName$> Query(IQueryable<$entity.EntityName$> query, $entity.EntityName$Params eqArgs, $entity.EntityName$Params neqArgs = null)
        {
            if (eqArgs != null)
            {
			$entity.PropList:{$if(it.ParamsTypeIsEqual)$

				if (eqArgs.$it.PropName$ != null)
				{
					query = query.Where(a => a.$it.SrcPropName$ == eqArgs.$it.PropName$);
				}
			$elseif(it.ParamsTypeIsRangeStart)$$if(!it.IsKey)$

				if (eqArgs.$it.PropName$ != null)
                {
                    query = query.Where(a => a.$it.SrcPropName$ >= eqArgs.$it.PropName$);
                }
			$endif$$elseif(it.ParamsTypeIsRangeEnd)$$if(!it.IsKey)$

				if (eqArgs.$it.PropName$ != null)
                {
                    query = query.Where(a => a.$it.SrcPropName$ <= eqArgs.$it.PropName$);
                }
			$endif$$elseif(it.ParamsTypeIsLike)$$if(!it.IsKey)$

				if (!string.IsNullOrEmpty(eqArgs.$it.PropName$))
                {
                    query = query.Where(a => a.$it.SrcPropName$.Contains(eqArgs.$it.PropName$));
                }
			$endif$$endif$}$
            }
			if(neqArgs != null){
			$entity.PropList:{$if(it.ParamsTypeIsEqual)$

				if (neqArgs.$it.PropName$ != null)
				{
					query = query.Where(a => a.$it.SrcPropName$ != neqArgs.$it.PropName$);
				}
			$elseif(it.ParamsTypeIsLike)$$if(!it.IsKey)$

				if (!string.IsNullOrEmpty(neqArgs.$it.PropName$))
                {
					query = query.Where(a => !a.$it.SrcPropName$.Contains(neqArgs.$it.PropName$));
				}
			$endif$$endif$}$
			}
            return query;
        }

		/// <summary>
        /// 升序排序的查询参数设置，当对应字段的升序设置为true时才会对
		/// 该字段升序。
        /// </summary>
        /// <param name="query">待设置升序参数的query对象</param>
        /// <param name="orderBy">装载升序参数的实体类</param>
        /// <returns>返回设置好升序参数的query对象</returns>
        IQueryable<$entity.EntityName$> OrderByAsc(IQueryable<$entity.EntityName$> query, $entity.EntityName$OrderBy orderBy)
        {
            if (orderBy != null)
            {
			$entity.PropList:{$if(it.ParamsTypeIsEqual)$

				if (orderBy.$it.PropName$) { query = query.OrderBy(a => a.$it.PropName$); }
			$endif$}$
            }
            return query;
        }

		/// <summary>
        /// 降序排序的查询参数设置，当对应字段的升序设置为true时才会对
		/// 该字段降序。
        /// </summary>
        /// <param name="query">待设置降序参数的query对象</param>
        /// <param name="orderBy">装载降序参数的实体类</param>
        /// <returns>返回设置好降序参数的query对象</returns>
        IQueryable<$entity.EntityName$> OrderByDesc(IQueryable<$entity.EntityName$> query, $entity.EntityName$OrderBy orderBy)
        {
            if (orderBy != null)
            {
			$entity.PropList:{$if(it.ParamsTypeIsEqual)$

				if (orderBy.$it.PropName$) { query = query.OrderByDescending(a => a.$it.PropName$); }
			$endif$};separator="else "$
				else
				{
					query = query.OrderByDescending(a => a.$entity.KeyName$);
				}
            }
            else
            {
                query = query.OrderByDescending(a => a.$entity.KeyName$);
            }
            return query;
        }

		/// <summary>
        /// 查询pageSize超过1000的分页查询，因为pageSize过大会导致查询超时，为避免这种情况，
		/// 必须使用该方法进行分页查询。
        /// </summary>
        /// <param name="eqArgs">查询参数，不为null时会作为查询参数</param>
        /// <param name="pageIndex">查询页码</param>
        /// <param name="pageSize">每页显示数据量</param>
		/// <param name="neqArgs">不等查询参数，不为null时会作为不等查询参数</param>
        /// <returns>返回分页查询结果</returns>
        public MyPagedList<$entity.EntityName$> BigPageList($entity.EntityName$Params eqArgs, int pageIndex = 1, int pageSize = 10000, $entity.EntityName$Params neqArgs = null)
        {
			if( pageIndex <= 0 )
			{
				pageIndex = 1;
			}
			if( pageSize > 10000 || pageSize <= 0 )
			{
				pageSize = 10000;
			}
            using (MyDbContext myDbContext = new MyDbContext())
            {
                IQueryable<$entity.EntityName$> query = Query(myDbContext.$entity.EntityNames$.AsNoTracking().AsQueryable(), eqArgs, neqArgs);
                query = OrderByAsc(query, eqArgs.orderByAsc);
                query = OrderByDesc(query, eqArgs.orderByDesc);
                int totalItemCount = query.Count();
				int totalPageCount = (totalItemCount - totalItemCount % pageSize) / pageSize + 1;
				if( pageIndex >= totalPageCount)
				{
					pageIndex = Math.Max(totalPageCount - 1,1);
				}
                query = query.Skip((pageIndex-1) * pageSize);
                List<$entity.EntityName$> pageDataList = new List<$entity.EntityName$>();
                for (int i=0, partCount = (pageSize - pageSize % 1000) / pageSize + 1; i<partCount ;i++)
                {
                    pageDataList.AddRange(query.Skip(i * 1000).Take(1000).ToList());
                }
                return new MyPagedList<$entity.EntityName$>
                {
                    CurrentPageIndex = pageIndex,
                    PageDataList = pageDataList,
                    TotalItemCount = totalItemCount,
                    PageSize = pageSize,
                    TotalPageCount = totalPageCount,
                    StartItemIndex = (pageSize - 1) * pageIndex + 1,
                    EndItemIndex = pageSize * pageIndex
                };
            }
        }

		/// <summary>
        /// 普通的分页查询功能，pageSize不宜过大，如果pageSize大于1000，使用：BigPageList
        /// </summary>
        /// <param name="eqArgs">查询参数，不为null时会作为查询参数</param>
        /// <param name="pageIndex">查询页码</param>
        /// <param name="pageSize">每页显示数据量</param>
		/// <param name="neqArgs">不等查询参数，不为null时会作为不等查询参数</param>
        /// <returns>返回分页查询结果</returns>
        public MyPagedList<$entity.EntityName$> PageList($entity.EntityName$Params eqArgs, int pageIndex = 1, int pageSize = 20,$entity.EntityName$Params neqArgs = null)
        {
			if( pageIndex <= 0 )
			{
				pageIndex = 1;
			}
			if( pageSize > 100)
			{
				pageSize = 100;
			} 
			else if( pageSize <= 0)
			{
				pageSize = 20;
			}
            using (MyDbContext myDbContext = new MyDbContext())
            {
                IQueryable<$entity.EntityName$> query = Query(myDbContext.$entity.EntityNames$.AsNoTracking().AsQueryable(), eqArgs, neqArgs);
                query = OrderByAsc(query, eqArgs.orderByAsc);
                query = OrderByDesc(query, eqArgs.orderByDesc);
                return query.ToMyPagedList(pageIndex, pageSize);
            }
        }

		/// <summary>
        /// 查询符合查询条件的数据量
        /// </summary>
        /// <param name="eqArgs">查询参数，不为null时会作为查询参数</param>
		/// <param name="neqArgs">不等查询参数，不为null时会作为不等查询参数</param>
        /// <returns>返回符合查询条件的数据量</returns>
        public int Count($entity.EntityName$Params eqArgs = null, $entity.EntityName$Params neqArgs = null)
        {
            using (MyDbContext myDbContext = new MyDbContext())
            {
                IQueryable<$entity.EntityName$> query = Query(myDbContext.$entity.EntityNames$.AsNoTracking().AsQueryable(), eqArgs, neqArgs);
                return query.Count();
            }
        }

		/// <summary>
        /// 查询符合查询条件的数据，数据不宜过大，如果数据过大建议使用分页查询
        /// </summary>
        /// <param name="eqArgs">查询参数，不为null时会作为查询参数</param>
		/// <param name="neqArgs">不等查询参数，不为null时会作为不等查询参数</param>
        /// <returns>返回符合查询条件的数</returns>
        public List<$entity.EntityName$> FindList($entity.EntityName$Params eqArgs = null, $entity.EntityName$Params neqArgs = null)
        {
            using (MyDbContext myDbContext = new MyDbContext())
            {
                IQueryable<$entity.EntityName$> query = Query(myDbContext.$entity.EntityNames$.AsNoTracking().AsQueryable(), eqArgs, neqArgs);
                return query.ToList();
            }
        }

		/// <summary>
        /// 修改变化值，把entity不为null的数据视为变化值
        /// </summary>
        /// <param name="entity">修改实体类，必须要传入主键，其余的参数如果不为null则视为变化值（主键id除外，只做数据标识）</param>
        /// <returns>返回修改的数据行数</returns>
        public int UpdateChange($entity.EntityName$ entity)
        {
            using (MyDbContext myDbContext = new MyDbContext())
            {
                $entity.EntityName$  updateBefore = new $entity.EntityName$  { $entity.KeyName$ = entity.$entity.KeyName$};
                myDbContext.$entity.EntityNames$.Attach(updateBefore);
			$entity.PropList:{$if(it.ParamsTypeIsEqual)$$if(!it.IsKey)$
					if (entity.$it.PropName$ != null)
					{
						updateBefore.$it.PropName$ = entity.$it.PropName$;
					}
			$endif$$endif$}$
                return myDbContext.SaveChanges();
            }
        }

		/// <summary>
        /// 批量修改变化值，把entity不为null的数据视为变化值
        /// </summary>
        /// <param name="entities">修改实体类集合，必须要传入主键，其余的参数如果不为null则视为变化值（主键id除外，只做数据标识）</param>
        /// <returns>返回修改的数据行数</returns>
		public int UpdateChangeBatch(List<$entity.EntityName$> entities)
		{
			using (MyDbContext myDbContext = new MyDbContext())
            {
				foreach($entity.EntityName$ entity in entities)
				{
					$entity.EntityName$  updateBefore = new $entity.EntityName$  { $entity.KeyName$ = entity.$entity.KeyName$};
					myDbContext.$entity.EntityNames$.Attach(updateBefore);
			$entity.PropList:{$if(it.ParamsTypeIsEqual)$$if(!it.IsKey)$
					if (entity.$it.PropName$ != null)
					{
						updateBefore.$it.PropName$ = entity.$it.PropName$;
					}
			$endif$$endif$}$
				}
				return myDbContext.SaveChanges();
			}
		}

		/// <summary>
        /// 把指定字段值设置为null
        /// </summary>
        /// <param name="param">设为null的字段参数，主键必须要传入，其他字段等于true则表示设置为null</param>
        /// <returns>返回修改的数据行数</returns>
		public void SetNull($entity.EntityName$SetNullParams param)
		{
			 $entity.EntityName$ updateBefore = FindEntity(param.$entity.KeyName$);
			 using (MyDbContext myDbContext = new MyDbContext())
             {
				myDbContext.$entity.EntityNames$.Attach(updateBefore);
				$entity.PropList:{$if(it.ParamsTypeIsEqual)$$if(!it.IsKey)$
				if (param.$it.PropName$)
				{
					updateBefore.$it.PropName$ = null;
				}
				$endif$$endif$}$
				myDbContext.SaveChanges();
			 }
		}
    }
}