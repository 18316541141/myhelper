using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Linq;
using System.Web;
using WebApplication1.Entity;
using WebApplication1.MyExtensions;
using WebApplication1.Params;
namespace WebApplication1.Controllers
{
	/// <summary>
	/// ***模块的控制器类
	/// </summary>
    public partial class $entity.EntityName$Controller : BaseController
    {
		/*抄考代码
----------------------------------------------------------------------------------------------------------------------------
		$entity.EntityName$ data = new $entity.EntityName$
		{
	$entity.PropList:{
		$if(it.ParamsTypeIsEqual)$
			$if(it.IsKey)$
				$it.PropName$ = Next(),
			$else$
				$it.PropName$ = param.$it.PropName$,
			$endif$
		$endif$
	}$
		};
----------------------------------------------------------------------------------------------------------------------------
		$entity.EntityName$Params param = new $entity.EntityName$Params
		{
	$entity.PropList:{
		$it.PropName$ = param.$it.PropName$,
	}$
		};
----------------------------------------------------------------------------------------------------------------------------
		/// <summary>
        /// 分页查询***模块，并返回查询结果
        /// </summary>
        /// <param name="param">查询参数</param>
        /// <param name="currentPageIndex">当前页码</param>
        /// <param name="pageSize">每页显示的数据量</param>
        /// <returns>返回***模块的查询结果</returns>
		public JsonResult Page($entity.EntityName$Params param,int currentPageIndex = 1,int pageSize = 20)
		{
			$entity.EntityName$Service service = new $entity.EntityName$Service();
			return MyJson(new Result{code = 0, data = service.Page(param, currentPageIndex, pageSize)});
		}
----------------------------------------------------------------------------------------------------------------------------
		/// <summary>
        /// 导出***模块，使用excel表保存
        /// </summary>
        /// <param name="param">查询参数</param>
		/// <param name="excelType">excel类型</param>
        /// <param name="currentPageIndex">当前页码</param>
        /// <param name="pageSize">每页显示的数据量</param>
        /// <returns>返回***模块的导出结果</returns>
		public ExcelResult<$entity.EntityName$> Export($entity.EntityName$Params param, string excelType, int currentPageIndex = 1, int pageSize = 10000)
		{
			$entity.EntityName$Service service = new $entity.EntityName$Service();
			return new ExcelResult<$entity.EntityName$>
			{
				DataList = irobotQrCodePayTaskService.Page(param, currentPageIndex, pageSize).pageDataList,
				FileName = "测试excel."+excelType
			};
		}
----------------------------------------------------------------------------------------------------------------------------
		/// <summary>
        /// 导入***模块数据
        /// </summary>
        /// <param name="param">查询参数</param>
        /// <param name="currentPageIndex">当前页码</param>
        /// <param name="pageSize">每页显示的数据量</param>
        /// <returns>返回***模块的导出结果</returns>
		public JsonResult Import(HttpPostedFileBase fileUpload, 其他参数...)
		{
			List<$entity.EntityName$> $entity.EntityName$List;
            if (fileUpload.FileName.EndsWith("xlsx"))
            {
                $entity.EntityName$List = ExcelHelper.ExcelXlsxToList<$entity.EntityName$>(fileUpload.InputStream);
            }
            else if (fileUpload.FileName.EndsWith("xls"))
            {
                $entity.EntityName$List = ExcelHelper.ExcelXlsToList<$entity.EntityName$>(fileUpload.InputStream);
            }
			$entity.EntityName$Service service = new $entity.EntityName$Service();
			service.AddBatch($entity.EntityName$List);
			return MyJson(new Result { code = 0, msg = "导入成功。"});
		}
----------------------------------------------------------------------------------------------------------------------------
		/// <summary>
        /// 根据主键删除指定数据
        /// </summary>
        /// <param name="$entity.KeyName$">删除数据的主键</param>
		public JsonResult Del(long $entity.KeyName$)
		{
			$entity.EntityName$Service service = new $entity.EntityName$Service();
            service.Del($entity.KeyName$);
			return MyJson(new Result { code = 0, msg = "数据已删除。"});
		}
----------------------------------------------------------------------------------------------------------------------------
		/// <summary>
        /// 新增一条数据
        /// </summary>
        /// <param name="data">新增的数据</param>
		public JsonResult Add($entity.EntityName$ data)
		{
			$entity.EntityName$Service service = new $entity.EntityName$Service();
			service.Add(data);
			return MyJson(new Result { code = 0, msg = "保存成功。"});
		}
----------------------------------------------------------------------------------------------------------------------------
		/// <summary>
        /// 批量修改状态
        /// </summary>
        /// <param name="datas">修改状态的数据</param>
		public JsonResult ChangeStatus($entity.EntityName$ datas)
		{
			$entity.EntityName$Service service = new $entity.EntityName$Service();
			return MyJson(new Result { code = 0,msg=\$"修改成功，共{service.ChangeStatus(datas)}条。"});
		}
----------------------------------------------------------------------------------------------------------------------------
		/// <summary>
        /// 根据主键id查询数据实体
        /// </summary>
        /// <param name="$entity.KeyName$">主键id</param>
		/// <returns>返回***模块的查询结果</returns>
		public JsonResult Load(long $entity.KeyName$)
		{
			$entity.EntityName$Service service = new $entity.EntityName$Service();
			return MyJson(new Result { code = 0, data = service.Load($entity.KeyName$) });
		}
----------------------------------------------------------------------------------------------------------------------------
		/// <summary>
        /// 批量删除数据
        /// </summary>
        /// <param name="datas">批量删除的数据</param>
		public JsonResult DelBatch(List<$entity.EntityName$> datas)
		{
			$entity.EntityName$Service service = new $entity.EntityName$Service();
			return MyJson(new Result { code = 0 ,msg = \$"删除成功，共{service.DelBatch(datas)}条。" });
		}
		*/
    }
}