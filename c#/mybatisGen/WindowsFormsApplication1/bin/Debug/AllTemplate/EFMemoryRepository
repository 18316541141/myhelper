using System;
using CommonHelper.CommonEntity;
using CommonHelper.EFRepository;
using CommonHelper.Helper;
using CommonHelper.Helper.EFDbContext;
using Newtonsoft.Json;
using System.Collections.Generic;
using System.Data.Entity;
using System.Linq;
using System.Web;
using WebApplication1.Entity;
using WebApplication1.Params;
namespace WebApplication1.Repository
{
    public partial class $entity.EntityName$MemoryRepository : BaseMemoryRepository<$entity.EntityName$, $entity.EntityName$Params, $entity.EntityName$SetNullParams>
    {
		public override List<IEquatable<$entity.EntityName$>> Sort($entity.EntityName$Params eqArgs, List<$entity.EntityName$> list)
        {
            IOrderedEnumerable<$entity.EntityName$> orderEnum = null;
			$entity.EntityName$OrderBy orderBy = eqArgs.orderByAsc;
			if (orderBy != null)
            {
			$entity.PropList:{$if(it.ParamsTypeIsEqual)$

				if (orderBy.$it.PropName$) { orderEnum = list.OrderBy(a => a.$it.PropName$); }
			$endif$};separator="else "$
            }
			orderBy = eqArgs.orderByDesc;
	    if (orderEnum == null)
            {
		    if (orderBy != null)
		    {
				$entity.PropList:{$if(it.ParamsTypeIsEqual)$

					if (orderBy.$it.PropName$) { orderEnum = list.OrderByDescending(a => a.$it.PropName$); }
				$endif$};separator="else "$
					else
					{
						orderEnum = list.OrderByDescending(a => a.$entity.KeyName$);
					}
		    }
		    else
		    {
			orderEnum = list.OrderByDescending(a => a.$entity.KeyName$);
		    }
	    }
            List<IEquatable<$entity.EntityName$>> ret = new List<IEquatable<$entity.EntityName$>>();
            foreach ($entity.EntityName$ entity in orderEnum.ToList())
            {
                ret.Add(entity);
            }
            return ret;
        }

        protected override bool Query($entity.EntityName$ entity, $entity.EntityName$Params paramz, $entity.EntityName$Params neqArgs)
        {
            if(paramz != null)
            {
				$entity.PropList:{$if(it.ParamsTypeIsEqual)$

				if (paramz.$it.PropName$ != null && entity.$it.SrcPropName$ != paramz.$it.PropName$)
				{
					return false;
				}
			$elseif(it.ParamsTypeIsRangeStart)$$if(!it.IsKey)$
				if (paramz.$it.PropName$ != null && entity.$it.SrcPropName$ < paramz.$it.PropName$)
                {
                    return false;
                }
			$endif$$elseif(it.ParamsTypeIsRangeEnd)$$if(!it.IsKey)$
				if (paramz.$it.PropName$ != null && entity.$it.SrcPropName$ > paramz.$it.PropName$)
                {
                    return false;
                }
			$endif$$elseif(it.ParamsTypeIsLike)$$if(!it.IsKey)$

				if (!string.IsNullOrEmpty(paramz.$it.PropName$) && entity.$it.SrcPropName$.IndexOf(paramz.$it.PropName$) == -1)
                {
                    return false;
                }
			$endif$$endif$}$
            }
            return true;
        }

        protected override void SetNullOper($entity.EntityName$ entity, $entity.EntityName$SetNullParams param)
        {
            $entity.PropList:{$if(it.ParamsTypeIsEqual)$$if(!it.IsKey)$
			if (param.$it.PropName$)
			{
				entity.$it.PropName$ = null;
			}
			$endif$$endif$}$
        }

        protected override void UpdateChange($entity.EntityName$ entity, $entity.EntityName$ change)
        {
            $entity.PropList:{$if(it.ParamsTypeIsEqual)$$if(!it.IsKey)$
			if (change.$it.PropName$ != null)
			{
				entity.$it.PropName$ = change.$it.PropName$;
			}
			$endif$$endif$}$
        }
    }
}