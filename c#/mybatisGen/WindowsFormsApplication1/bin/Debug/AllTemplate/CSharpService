using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Linq;
using System.Web;
using WebApplication1.Entity;
using WebApplication1.MyExtensions;
using WebApplication1.Params;
using CommonHelper.AopInterceptor;
namespace WebApplication1.Service
{
	/// <summary>
    /// ***模块的业务类
    /// </summary>
	//[Intercept(typeof(DistributedTransactionScan))]	//启用分布式事务扫描
	public partial class $entity.EntityName$Service : BaseService
    {
		public $entity.EntityName$Repository Repository { set; get; }

		/*抄考代码
		[DistributedTransactionScope] //启用分布式事务
----------------------------------------------------------------------------------------------------------------------------
		$entity.EntityName$ data = new $entity.EntityName$
		{
	$entity.PropList:{$if(it.ParamsTypeIsEqual)$$if(it.IsKey)$$it.PropName$ = NextId(),$else$$it.PropName$ = param.$it.PropName$,$endif$$endif$}$
		};
----------------------------------------------------------------------------------------------------------------------------
		$entity.EntityName$Params param = new $entity.EntityName$Params
		{
	$entity.PropList:{$it.PropName$ = param.$it.PropName$,}$
		};
----------------------------------------------------------------------------------------------------------------------------
		/// <summary>
        /// 分页查询***模块，并返回查询结果
        /// </summary>
        /// <param name="param">查询参数</param>
        /// <param name="currentPageIndex">当前页码</param>
        /// <param name="pageSize">每页显示的数据量</param>
        /// <returns>返回***模块的查询结果</returns>
		public MyPagedList<$entity.EntityName$> Page(int currentPageIndex = 1,int pageSize = 20,$entity.EntityName$Params param = null)
		{
			return Repository.PageList(currentPageIndex, pageSize, param);
		}
----------------------------------------------------------------------------------------------------------------------------
		/// <summary>
        /// 根据主键删除指定数据
        /// </summary>
        /// <param name="$entity.KeyName$">删除数据的主键</param>
		public void Del(long $entity.KeyName$)
		{
			Repository.Delete(a => a.$entity.KeyName$);
		}
----------------------------------------------------------------------------------------------------------------------------
		/// <summary>
        /// 新增一条数据
        /// </summary>
        /// <param name="data">新增的数据</param>
		public void Add($entity.EntityName$ data)
		{
			Repository.Insert(data);
		}
----------------------------------------------------------------------------------------------------------------------------
		/// <summary>
        /// 修改***模块的数据
        /// </summary>
        /// <param name="data">修改数据，不为null才会被修改，主键必须不为null</param>
        public void Update($entity.EntityName$ data)
        {
            Repository.UpdateChange(new $entity.EntityName$
            {
                $entity.PropList:{$if(it.ParamsTypeIsEqual)$$if(it.IsKey)$$it.PropName$ = NextId(),$else$$it.PropName$ = data.$it.PropName$,$endif$$endif$}$
            });
        }
----------------------------------------------------------------------------------------------------------------------------
		/// <summary>
        /// 新增多条数据
        /// </summary>
        /// <param name="datas">新增的数据</param>
		public void AddBatch(List<$entity.EntityName$> datas)
		{
			foreach($entity.EntityName$ data in datas)
			{
				data.$entity.KeyName$ = NextId();
				data.CreateDate = DateTime.Now;
				data.Status = 1;
			}
			Repository.Insert(datas);
		}
----------------------------------------------------------------------------------------------------------------------------
		/// <summary>
        /// 批量修改状态
        /// </summary>
        /// <param name="datas">修改状态的数据</param>
		public int ChangeStatus(List<$entity.EntityName$> datas)
		{
			List<$entity.EntityName$> updates = new List<$entity.EntityName$>();
			for($entity.EntityName$ data in datas)
			{
				updates.Add(new $entity.EntityName$
				{
					$entity.KeyName$ = data.$entity.KeyName$,
					Status = data.Status
				});
			}
			return Repository.UpdateChangeBatch(updates);
		}
----------------------------------------------------------------------------------------------------------------------------
		/// <summary>
        /// 根据主键id查询***模块的数据实体
        /// </summary>
        /// <param name="$entity.KeyName$">主键id</param>
		/// <returns>返回***模块的查询结果</returns>
		public $entity.EntityName$ Load(long $entity.KeyName$)
		{
			return Repository.FindEntity($entity.KeyName$);
		}
----------------------------------------------------------------------------------------------------------------------------
		/// <summary>
        /// 批量删除数据
        /// </summary>
        /// <param name="datas">批量删除的数据</param>
		public int DelBatch($entity.EntityName$ datas)
		{
			return Repository.Delete(datas);
		}
----------------------------------------------------------------------------------------------------------------------------
		/// <summary>
        /// 对“****”方法的入参进行校验基础（只校验是否为空，格式，长度，大小，不涉及
	/// 数据库查询、流读取等其他复杂操作），校验不通过时，异常往外抛出
        /// </summary>
        /// <param name="param">待校验参数</param>
        public void Check****($entity.EntityName$ data)
        {
			Regex regex = new Regex("\\w");
			$entity.PropList:{$if(it.ParamsTypeIsEqual)$
				if(string.IsNullOrEmpty(data.$it.PropName$))
				{
					Ex("$it.PropNotes$不能为空");
				}
				else
				{
					if(data.$it.PropName$.Length<6 || data.$it.PropName$.Length>20)
					{
						Ex("$it.PropNotes$长度须在6-20个字符之间");
					}
					if(!regex.IsMatch(data.$it.PropName$))
					{
						Ex("$it.PropNotes$须是字母、数字、下划线组合");
					}
				}
			$endif$}$
			$entity.PropList:{$if(it.ParamsTypeIsEqual)$
				if(data.$it.PropName$==null)
				{
					Ex("$it.PropNotes$不能为空");
				}
				else
				{
					if(data.$it.PropName$<6 || data.$it.PropName$>20)
					{
						Ex("$it.PropNotes$的值须在6-20之间");
					}

				}
			$endif$}$
        }
		*/
    }
}